// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reactivities.Infrastructure.Persistence.Context;

#nullable disable

namespace Reactivities.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221208235518_NullableBio")]
    partial class NullableBio
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity.Activity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a396aaab-6f7a-420c-9a18-84660c291fc4"),
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2022, 11, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8663),
                            Description = "Activity 1 months ago",
                            Title = "Past Activity 1",
                            Venue = "Pub"
                        },
                        new
                        {
                            Id = new Guid("061d521e-e288-4ed1-b912-550ae6ef035c"),
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2022, 10, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8713),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 2",
                            Venue = "Louvre"
                        },
                        new
                        {
                            Id = new Guid("8397c5c6-557b-4ead-84e1-6c2817506622"),
                            Category = "Culture",
                            City = "London",
                            Date = new DateTime(2023, 1, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8723),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            Id = new Guid("365f1f98-5e1e-4e65-a8e3-0a468457581a"),
                            Category = "Music",
                            City = "London",
                            Date = new DateTime(2023, 2, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8725),
                            Description = "Activity 2 month in future",
                            Title = "Future Activity 2",
                            Venue = "02 Arena"
                        },
                        new
                        {
                            Id = new Guid("49a9dad3-69b0-4dc9-8e70-d4da16eb0aed"),
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 3, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8728),
                            Description = "Activity 3 month in future",
                            Title = "Future Activity 3",
                            Venue = "Another Pub"
                        },
                        new
                        {
                            Id = new Guid("b4f29600-ae80-4bc6-b6b1-56627ff95d72"),
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 4, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8730),
                            Description = "Activity 4 month in future",
                            Title = "Future Activity 4",
                            Venue = "Just Another Pub"
                        },
                        new
                        {
                            Id = new Guid("ce3b5bc9-e21f-4516-b92a-98c57fd28730"),
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2023, 5, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8732),
                            Description = "Activity 5 month in future",
                            Title = "Future Activity 5",
                            Venue = "Musée d'Orsay"
                        },
                        new
                        {
                            Id = new Guid("7297d931-7141-478d-a2e6-129ae12443bc"),
                            Category = "Music",
                            City = "Italy",
                            Date = new DateTime(2023, 6, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8734),
                            Description = "Activity 6 month in future",
                            Title = "Future Activity 6",
                            Venue = "Coliseum"
                        },
                        new
                        {
                            Id = new Guid("a3aa4bee-5e11-4eef-9fa7-406b242bc56c"),
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 7, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8736),
                            Description = "Activity 7 month in future",
                            Title = "Future Activity 7",
                            Venue = "Another Pub Again"
                        },
                        new
                        {
                            Id = new Guid("c4f128c2-c591-4445-901e-edcae131cf1b"),
                            Category = "Drinks",
                            City = "Paris",
                            Date = new DateTime(2023, 8, 8, 17, 55, 18, 137, DateTimeKind.Local).AddTicks(8739),
                            Description = "Activity 8 month in future",
                            Title = "Future Activity 8",
                            Venue = "Ritz Hotel"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1defc91c-d5fc-4c8c-90f5-fd3f0e7b929f",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "8e12d9be-bd58-4c55-81af-1b60cef3fbe4",
                            DisplayName = "Bob",
                            Email = "bob@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEBIzulR7Swng13NnW8VP8NBuPTY21nI4brKbiPwEZZQSbwJOqDVEroH/jP+egYp9cA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94e304b8-0acb-425b-8e10-b5ca3c573074",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        },
                        new
                        {
                            Id = "3fa72a24-4691-4b4f-add0-45980de073f7",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "2f14d8a0-7f99-43e0-887f-f35d12047c77",
                            DisplayName = "Tom",
                            Email = "tom@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELutKnCFqu0SFxIMWus5s8hMeL3X43FZmIFxOnxCvZgT7Z/3G9fQWE1qJfngEaZRKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9cdac2fb-8bb9-4be2-820b-650fa455a943",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = "5f2c965e-d2db-4690-b9ef-63c383bbc52a",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "8a3b1c9f-0acb-4c79-9f7f-b480d516cd48",
                            DisplayName = "Jane",
                            Email = "jane@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEF/sJ/1QdrGMGAPAzU9KxIqZC50Y7nW5VkqUZoSYGPLODLERgYiJi3BzRl8G2ddPGw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d51185dd-28f4-4df2-8393-7a71749da314",
                            TwoFactorEnabled = false,
                            UserName = "jane"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
