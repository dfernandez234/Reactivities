// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reactivities.Infrastructure.Persistence.Context;

#nullable disable

namespace Reactivities.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221211230239_ActivityCancelled")]
    partial class ActivityCancelled
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = "608e0aea-1501-416c-9d3f-4d4405966883",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2022, 11, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6013),
                            Description = "Activity 1 months ago",
                            Title = "Past Activity 1",
                            Venue = "Pub"
                        },
                        new
                        {
                            ActivityId = "8f4f2927-a5c8-4ab8-92e3-4103d17cef21",
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2022, 10, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6061),
                            Description = "Activity 2 months ago",
                            Title = "Past Activity 2",
                            Venue = "Louvre"
                        },
                        new
                        {
                            ActivityId = "7811de8a-6615-42c0-b773-53f70b183f0c",
                            Category = "Culture",
                            City = "London",
                            Date = new DateTime(2023, 1, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6065),
                            Description = "Activity 1 month in future",
                            Title = "Future Activity 1",
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            ActivityId = "859435a1-d287-4efa-85ab-c3d229dcc876",
                            Category = "Music",
                            City = "London",
                            Date = new DateTime(2023, 2, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6068),
                            Description = "Activity 2 month in future",
                            Title = "Future Activity 2",
                            Venue = "02 Arena"
                        },
                        new
                        {
                            ActivityId = "bcdb7d9f-a5bd-4819-94d5-5c52941a7794",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 3, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6079),
                            Description = "Activity 3 month in future",
                            Title = "Future Activity 3",
                            Venue = "Another Pub"
                        },
                        new
                        {
                            ActivityId = "81e32fd0-2e0e-4f26-82fb-703c6740439c",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 4, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6083),
                            Description = "Activity 4 month in future",
                            Title = "Future Activity 4",
                            Venue = "Just Another Pub"
                        },
                        new
                        {
                            ActivityId = "1199a9b9-8683-49f2-9397-095d37af2ecd",
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2023, 5, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6086),
                            Description = "Activity 5 month in future",
                            Title = "Future Activity 5",
                            Venue = "Musée d'Orsay"
                        },
                        new
                        {
                            ActivityId = "2b31af69-0b36-443b-9ace-ca59b7aa00d3",
                            Category = "Music",
                            City = "Italy",
                            Date = new DateTime(2023, 6, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6090),
                            Description = "Activity 6 month in future",
                            Title = "Future Activity 6",
                            Venue = "Coliseum"
                        },
                        new
                        {
                            ActivityId = "f685ae68-cf18-43d8-ac05-8fdf7e9ccdec",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 7, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6094),
                            Description = "Activity 7 month in future",
                            Title = "Future Activity 7",
                            Venue = "Another Pub Again"
                        },
                        new
                        {
                            ActivityId = "f8464cff-8b48-43c8-a376-37306cbe235f",
                            Category = "Drinks",
                            City = "Paris",
                            Date = new DateTime(2023, 8, 11, 17, 2, 39, 359, DateTimeKind.Local).AddTicks(6098),
                            Description = "Activity 8 month in future",
                            Title = "Future Activity 8",
                            Venue = "Ritz Hotel"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.ActivityAttendee", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("AppUserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivitiesAttendees");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "df9291d3-a4df-454b-97b0-afd7e72d9a0d",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "5a4ff96a-88e2-4f4c-9b97-6dc38210cd4b",
                            DisplayName = "Bob",
                            Email = "bob@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKIF3NAvpDUXx5wraEkDFIsopK4+dnHdIlBLmuGm4aqSa6Pl2aG/IIWJ01vfTv3ogw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "23583915-febd-4fa6-a2fd-7646d5208257",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        },
                        new
                        {
                            Id = "28606032-d6fc-4d08-9e76-dc4237fa5a3d",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "25fd1950-2675-4771-941e-3bf240637246",
                            DisplayName = "Tom",
                            Email = "tom@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEIIOZLllwMEo6mRfSqNKZpZiq6kbU22LaHB+0ldA+POcfH0nre0wh2Tc3GuSJiYVkQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0fbd095e-fa43-4359-bcfb-ced072929a05",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = "2c17a51e-b074-4576-b6b5-94335686303d",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "3b5dcd64-368f-4338-b07e-101e5a93da60",
                            DisplayName = "Jane",
                            Email = "jane@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAELd+x6yyievoYXuDXA3bsWbVPVuIo6ecXNJuUn8Ay4iBIK1Nt/3CAmjTJiD/fnyzow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "020d9cff-59cc-4df4-8a3e-a35458776ded",
                            TwoFactorEnabled = false,
                            UserName = "jane"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.ActivityAttendee", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.Activity", "Activity")
                        .WithMany("Attendees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
