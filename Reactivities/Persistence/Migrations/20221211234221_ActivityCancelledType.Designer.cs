// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reactivities.Infrastructure.Persistence.Context;

#nullable disable

namespace Reactivities.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221211234221_ActivityCancelledType")]
    partial class ActivityCancelledType
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = "e7c151b4-f97f-42dd-b75c-27e41b4b0e42",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2022, 11, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8824),
                            Description = "Activity 1 months ago",
                            IsCancelled = false,
                            Title = "Past Activity 1",
                            Venue = "Pub"
                        },
                        new
                        {
                            ActivityId = "96dd72dc-0597-4bff-99c9-4e68a43318c5",
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2022, 10, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8870),
                            Description = "Activity 2 months ago",
                            IsCancelled = false,
                            Title = "Past Activity 2",
                            Venue = "Louvre"
                        },
                        new
                        {
                            ActivityId = "5b566f8f-0c65-412b-a2b2-769e7f89bf9c",
                            Category = "Culture",
                            City = "London",
                            Date = new DateTime(2023, 1, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8874),
                            Description = "Activity 1 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 1",
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            ActivityId = "d045b78b-dcd9-4593-a961-ebf987b1ca69",
                            Category = "Music",
                            City = "London",
                            Date = new DateTime(2023, 2, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8878),
                            Description = "Activity 2 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 2",
                            Venue = "02 Arena"
                        },
                        new
                        {
                            ActivityId = "b07797fc-e982-4494-bb72-2201c45f0127",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 3, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8881),
                            Description = "Activity 3 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 3",
                            Venue = "Another Pub"
                        },
                        new
                        {
                            ActivityId = "536e5bb5-578f-488c-881b-46ff68e131da",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 4, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8884),
                            Description = "Activity 4 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 4",
                            Venue = "Just Another Pub"
                        },
                        new
                        {
                            ActivityId = "9e0bacb5-d6bb-4f9f-bbf2-f45bae65a00a",
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2023, 5, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8888),
                            Description = "Activity 5 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 5",
                            Venue = "Musée d'Orsay"
                        },
                        new
                        {
                            ActivityId = "b7d09299-ea89-4ffe-b8d7-e0d2722209a7",
                            Category = "Music",
                            City = "Italy",
                            Date = new DateTime(2023, 6, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8891),
                            Description = "Activity 6 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 6",
                            Venue = "Coliseum"
                        },
                        new
                        {
                            ActivityId = "73bd6596-fc90-4f34-8c26-7c9f9c0e72ae",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 7, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8897),
                            Description = "Activity 7 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 7",
                            Venue = "Another Pub Again"
                        },
                        new
                        {
                            ActivityId = "fe8093db-aa57-417c-9e20-56d28ba4b9be",
                            Category = "Drinks",
                            City = "Paris",
                            Date = new DateTime(2023, 8, 11, 17, 42, 20, 927, DateTimeKind.Local).AddTicks(8900),
                            Description = "Activity 8 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 8",
                            Venue = "Ritz Hotel"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.ActivityAttendee", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("AppUserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivitiesAttendees");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6945e9ee-f766-4533-acc9-ba890dafe71b",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "b9a9c2a3-38d7-4024-9e0c-9d112bb5e524",
                            DisplayName = "Bob",
                            Email = "bob@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEEALRKryeTlzokuExruoTuSfHe2HaovSDz8DxD+y3C1IdntfPiUfYHTjTpCzopOg6A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b353857-1740-4a10-89de-58c48434bb16",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        },
                        new
                        {
                            Id = "a46f98c2-eced-4fb1-9cae-5a2845a6342f",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "2d188167-bd99-41ec-92bc-74912826bfa5",
                            DisplayName = "Tom",
                            Email = "tom@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEHZRHJmbrwd0KG7V3PMLWKxQwqmfzNVwQH09s2qcr5OSHoANhoN027J2GH445GKPrg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a08698f8-5ab2-4cb4-b09b-428666405093",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = "0f22522b-0e78-4b33-affe-fd1fd11b3978",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "be706a0f-0930-472c-bc77-31fc44dfc2ea",
                            DisplayName = "Jane",
                            Email = "jane@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEKBe3v0UjbXL1ovNTnheQB8VMSg+YD5BzR/JVSVV4JBBfgUvVD0ywl4aE3U9kSUexA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "33011d6a-5b77-4bb1-98c0-bea291db3c6a",
                            TwoFactorEnabled = false,
                            UserName = "jane"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.ActivityAttendee", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.Activity", "Activity")
                        .WithMany("Attendees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Attendees");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Activities");
                });
#pragma warning restore 612, 618
        }
    }
}
