// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reactivities.Infrastructure.Persistence.Context;

#nullable disable

namespace Reactivities.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221218002716_Comments")]
    partial class Comments
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity", b =>
                {
                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCancelled")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Venue")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ActivityId");

                    b.ToTable("Activities");

                    b.HasData(
                        new
                        {
                            ActivityId = "b16a420b-2b43-46ec-9e04-1be283cd68cb",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2022, 11, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1467),
                            Description = "Activity 1 months ago",
                            IsCancelled = false,
                            Title = "Past Activity 1",
                            Venue = "Pub"
                        },
                        new
                        {
                            ActivityId = "6fa46c14-7d32-45af-9f49-96a93cca8e02",
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2022, 10, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1507),
                            Description = "Activity 2 months ago",
                            IsCancelled = false,
                            Title = "Past Activity 2",
                            Venue = "Louvre"
                        },
                        new
                        {
                            ActivityId = "367d29d2-93fe-4346-bb60-030f82b5a404",
                            Category = "Culture",
                            City = "London",
                            Date = new DateTime(2023, 1, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1510),
                            Description = "Activity 1 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 1",
                            Venue = "Natural History Museum"
                        },
                        new
                        {
                            ActivityId = "d1110c65-87ae-4fcf-af8e-761890a3c80a",
                            Category = "Music",
                            City = "London",
                            Date = new DateTime(2023, 2, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1512),
                            Description = "Activity 2 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 2",
                            Venue = "02 Arena"
                        },
                        new
                        {
                            ActivityId = "dd01183f-901e-411f-abae-3e065cb57456",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 3, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1515),
                            Description = "Activity 3 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 3",
                            Venue = "Another Pub"
                        },
                        new
                        {
                            ActivityId = "d50fc785-d15c-4faa-9e50-d456b132d508",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 4, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1517),
                            Description = "Activity 4 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 4",
                            Venue = "Just Another Pub"
                        },
                        new
                        {
                            ActivityId = "457d8bc2-c043-47fd-a346-9c80bbb0faf6",
                            Category = "Culture",
                            City = "Paris",
                            Date = new DateTime(2023, 5, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1519),
                            Description = "Activity 5 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 5",
                            Venue = "Musée d'Orsay"
                        },
                        new
                        {
                            ActivityId = "15c98ad8-1a10-4a16-a4e2-ac00bd224b10",
                            Category = "Music",
                            City = "Italy",
                            Date = new DateTime(2023, 6, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1521),
                            Description = "Activity 6 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 6",
                            Venue = "Coliseum"
                        },
                        new
                        {
                            ActivityId = "d9a5dbeb-2b83-4263-83f7-d033b7f345b1",
                            Category = "Drinks",
                            City = "London",
                            Date = new DateTime(2023, 7, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1523),
                            Description = "Activity 7 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 7",
                            Venue = "Another Pub Again"
                        },
                        new
                        {
                            ActivityId = "66daebb2-b0f6-49d9-89f9-011b7a5151b3",
                            Category = "Drinks",
                            City = "Paris",
                            Date = new DateTime(2023, 8, 17, 18, 27, 16, 253, DateTimeKind.Local).AddTicks(1526),
                            Description = "Activity 8 month in future",
                            IsCancelled = false,
                            Title = "Future Activity 8",
                            Venue = "Ritz Hotel"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.ActivityAttendee", b =>
                {
                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.HasKey("AppUserId", "ActivityId");

                    b.HasIndex("ActivityId");

                    b.ToTable("ActivitiesAttendees");

                    b.HasData(
                        new
                        {
                            AppUserId = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            ActivityId = "b16a420b-2b43-46ec-9e04-1be283cd68cb",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            ActivityId = "6fa46c14-7d32-45af-9f49-96a93cca8e02",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "6fa46c14-7d32-45af-9f49-96a93cca8e02",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "07065484-6bbd-4ddd-9fad-ec075a068141",
                            ActivityId = "367d29d2-93fe-4346-bb60-030f82b5a404",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "367d29d2-93fe-4346-bb60-030f82b5a404",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            ActivityId = "d1110c65-87ae-4fcf-af8e-761890a3c80a",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "07065484-6bbd-4ddd-9fad-ec075a068141",
                            ActivityId = "d1110c65-87ae-4fcf-af8e-761890a3c80a",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "dd01183f-901e-411f-abae-3e065cb57456",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            ActivityId = "dd01183f-901e-411f-abae-3e065cb57456",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "d50fc785-d15c-4faa-9e50-d456b132d508",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            ActivityId = "457d8bc2-c043-47fd-a346-9c80bbb0faf6",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "457d8bc2-c043-47fd-a346-9c80bbb0faf6",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "07065484-6bbd-4ddd-9fad-ec075a068141",
                            ActivityId = "15c98ad8-1a10-4a16-a4e2-ac00bd224b10",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "15c98ad8-1a10-4a16-a4e2-ac00bd224b10",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            ActivityId = "d9a5dbeb-2b83-4263-83f7-d033b7f345b1",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "07065484-6bbd-4ddd-9fad-ec075a068141",
                            ActivityId = "d9a5dbeb-2b83-4263-83f7-d033b7f345b1",
                            IsHost = false
                        },
                        new
                        {
                            AppUserId = "07065484-6bbd-4ddd-9fad-ec075a068141",
                            ActivityId = "66daebb2-b0f6-49d9-89f9-011b7a5151b3",
                            IsHost = true
                        },
                        new
                        {
                            AppUserId = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            ActivityId = "66daebb2-b0f6-49d9-89f9-011b7a5151b3",
                            IsHost = false
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3055acfb-e8b6-409c-8311-2302b75c37a9",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "ba43cdc9-8a89-4dc1-aaeb-a9cfa5d95daf",
                            DisplayName = "Bob",
                            Email = "bob@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELVpUHRLLXJux4BmK1c21yfFnpYcyHEGEdv2y0x7kZ079RevPy7H7uwwYr/YdlTGXw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f5e27491-7ac2-4462-9d11-dfd564a9f9ed",
                            TwoFactorEnabled = false,
                            UserName = "bob"
                        },
                        new
                        {
                            Id = "53503633-08ab-4c93-a2a1-5f8ea67229fd",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "f6f39bfc-82d5-4ee0-a51c-8faba627ef6f",
                            DisplayName = "Tom",
                            Email = "tom@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TOM@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEPK09Q6oibCW3BaxU6SJqm8eIZTo9eB/kY4QD9JlC4elrVnpbn84XsnlBINtzrpFTg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4fb36b0d-6c2e-44fb-b7ca-38d438378c07",
                            TwoFactorEnabled = false,
                            UserName = "tom"
                        },
                        new
                        {
                            Id = "07065484-6bbd-4ddd-9fad-ec075a068141",
                            AccessFailedCount = 0,
                            Bio = "",
                            ConcurrencyStamp = "a1af547d-201c-4736-be9f-077e19f44caf",
                            DisplayName = "Jane",
                            Email = "jane@test.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE@TEST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGOZvD5o47G8Y+PT7+Vj2w3IVm3L+/0soZ+rJtJEDEtAVHi33MMk+jggxvUCLmXtmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "01f0e514-9614-44f3-a336-3c30a0163dfb",
                            TwoFactorEnabled = false,
                            UserName = "jane"
                        });
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ActivityId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Photo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.ActivityAttendee", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.Activity", "Activity")
                        .WithMany("Attendees")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", "AppUser")
                        .WithMany("Activities")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Activity");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.Activity", "Activity")
                        .WithMany("Comments")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reactivities.Domain.Entities.AppUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Activity");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Photo", b =>
                {
                    b.HasOne("Reactivities.Domain.Entities.AppUser", null)
                        .WithMany("Photos")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Attendees");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Reactivities.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Photos");
                });
#pragma warning restore 612, 618
        }
    }
}
